// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	context "context"

	jwk "github.com/lestrrat-go/jwx/v2/jwk"
	mock "github.com/stretchr/testify/mock"
)

// KeyFetcher is an autogenerated mock type for the KeyFetcher type
type KeyFetcher struct {
	mock.Mock
}

// FetchKeys provides a mock function with given fields: ctx, jwksUrl
func (_m *KeyFetcher) FetchKeys(ctx context.Context, jwksUrl string) (jwk.Set, error) {
	ret := _m.Called(ctx, jwksUrl)

	if len(ret) == 0 {
		panic("no return value specified for FetchKeys")
	}

	var r0 jwk.Set
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (jwk.Set, error)); ok {
		return rf(ctx, jwksUrl)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) jwk.Set); ok {
		r0 = rf(ctx, jwksUrl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(jwk.Set)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, jwksUrl)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewKeyFetcher creates a new instance of KeyFetcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewKeyFetcher(t interface {
	mock.TestingT
	Cleanup(func())
}) *KeyFetcher {
	mock := &KeyFetcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
