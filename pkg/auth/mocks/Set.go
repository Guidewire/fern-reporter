// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	context "context"

	arrayiter "github.com/lestrrat-go/iter/arrayiter"

	jwk "github.com/lestrrat-go/jwx/v2/jwk"

	mapiter "github.com/lestrrat-go/iter/mapiter"

	mock "github.com/stretchr/testify/mock"
)

// Set is an autogenerated mock type for the Set type
type Set struct {
	mock.Mock
}

// AddKey provides a mock function with given fields: _a0
func (_m *Set) AddKey(_a0 jwk.Key) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for AddKey")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(jwk.Key) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Clear provides a mock function with given fields:
func (_m *Set) Clear() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Clear")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Clone provides a mock function with given fields:
func (_m *Set) Clone() (jwk.Set, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Clone")
	}

	var r0 jwk.Set
	var r1 error
	if rf, ok := ret.Get(0).(func() (jwk.Set, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() jwk.Set); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(jwk.Set)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: _a0
func (_m *Set) Get(_a0 string) (interface{}, bool) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 interface{}
	var r1 bool
	if rf, ok := ret.Get(0).(func(string) (interface{}, bool)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) interface{}); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// Index provides a mock function with given fields: _a0
func (_m *Set) Index(_a0 jwk.Key) int {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Index")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func(jwk.Key) int); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Iterate provides a mock function with given fields: _a0
func (_m *Set) Iterate(_a0 context.Context) mapiter.Iterator {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Iterate")
	}

	var r0 mapiter.Iterator
	if rf, ok := ret.Get(0).(func(context.Context) mapiter.Iterator); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mapiter.Iterator)
		}
	}

	return r0
}

// Key provides a mock function with given fields: _a0
func (_m *Set) Key(_a0 int) (jwk.Key, bool) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Key")
	}

	var r0 jwk.Key
	var r1 bool
	if rf, ok := ret.Get(0).(func(int) (jwk.Key, bool)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(int) jwk.Key); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(jwk.Key)
		}
	}

	if rf, ok := ret.Get(1).(func(int) bool); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// Keys provides a mock function with given fields: _a0
func (_m *Set) Keys(_a0 context.Context) arrayiter.Iterator {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Keys")
	}

	var r0 arrayiter.Iterator
	if rf, ok := ret.Get(0).(func(context.Context) arrayiter.Iterator); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(arrayiter.Iterator)
		}
	}

	return r0
}

// Len provides a mock function with given fields:
func (_m *Set) Len() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Len")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// LookupKeyID provides a mock function with given fields: _a0
func (_m *Set) LookupKeyID(_a0 string) (jwk.Key, bool) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for LookupKeyID")
	}

	var r0 jwk.Key
	var r1 bool
	if rf, ok := ret.Get(0).(func(string) (jwk.Key, bool)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) jwk.Key); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(jwk.Key)
		}
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// Remove provides a mock function with given fields: _a0
func (_m *Set) Remove(_a0 string) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Remove")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveKey provides a mock function with given fields: _a0
func (_m *Set) RemoveKey(_a0 jwk.Key) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for RemoveKey")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(jwk.Key) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Set provides a mock function with given fields: _a0, _a1
func (_m *Set) Set(_a0 string, _a1 interface{}) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewSet creates a new instance of Set. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSet(t interface {
	mock.TestingT
	Cleanup(func())
}) *Set {
	mock := &Set{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
